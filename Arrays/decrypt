class Solution {
public:
    vector<int> decrypt(vector<int>& code, int k) {
        int n = code.size();
        vector<int> decrypt(n, 0);  // Initialize result vector with size n

        if (k == 0) {
            return decrypt;  // If k is 0, all elements in the decrypted array are 0
        }

        // Handle the positive `k` case
        if (k > 0) {
            for (int i = 0; i < n; i++) {
                int sum = 0;
                for (int j = 1; j <= k; j++) {
                    sum += code[(i + j) % n];  // Use modulo for circular indexing
                }
                decrypt[i] = sum;
            }
        }

        // Handle the negative `k` case
        if (k < 0) {
            for (int i = 0; i < n; i++) {
                int sum = 0;
                for (int j = 1; j <= -k; j++) {
                    sum += code[(i - j + n) % n];  // Use modulo for circular indexing
                }
                decrypt[i] = sum;
            }
        }

        return decrypt;


    }
};

